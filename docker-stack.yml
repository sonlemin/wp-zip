services:
  # Load Balanced WordPress Instances
  wordpress:
    image: wordpress:6.4-php8.1-apache
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
      rollback_config:
        parallelism: 1
        delay: 10s
        failure_action: pause
        monitor: 60s
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      placement:
        constraints:
          - node.role == worker
    environment:
      WORDPRESS_DB_HOST: mysql-master:3306
      WORDPRESS_DB_USER: wordpress_user
      WORDPRESS_DB_PASSWORD_FILE: /run/secrets/mysql_password
      WORDPRESS_DB_NAME: wordpress_db
      WORDPRESS_TABLE_PREFIX: wp_
      WORDPRESS_DEBUG: 1
      WORDPRESS_CONFIG_EXTRA: |
        define('WP_REDIS_HOST', 'redis');
        define('WP_REDIS_PORT', 6379);
        define('WP_CACHE', true);
        define('MEMCACHED_SERVERS', array('memcached:11211'));
        define('WP_ALLOW_MULTISITE', true);
        define('FORCE_SSL_ADMIN', false);
    volumes:
      - wordpress_data:/var/www/html
      - wp_content:/var/www/html/wp-content
    networks:
      - backend
      - frontend
    secrets:
      - mysql_password
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/wp-admin/install.php"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: ingress
      - target: 443
        published: 443
        protocol: tcp
        mode: ingress
    volumes:
      - nginx_config:/etc/nginx/conf.d
      - wordpress_data:/var/www/html:ro
    networks:
      - frontend
      - backend
    configs:
      - source: nginx_conf
        target: /etc/nginx/nginx.conf
      - source: nginx_wordpress_conf
        target: /etc/nginx/conf.d/wordpress.conf
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
[O      timeout: 10s
      retries: 3

  # MySQL Master
  mysql-master:
    image: mysql:8.0
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      placement:
        constraints:
          - node.labels.mysql-master == true
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/mysql_root_password
      MYSQL_DATABASE: wordpress_db
      MYSQL_USER: wordpress_user
      MYSQL_PASSWORD_FILE: /run/secrets/mysql_password
      MYSQL_REPLICATION_USER: replicator
      MYSQL_REPLICATION_PASSWORD_FILE: /run/secrets/mysql_replication_password
    volumes:
      - mysql_master_data:/var/lib/mysql
    networks:
      - backend
    secrets:
      - mysql_root_password
      - mysql_password
      - mysql_replication_password
    command: --default-authentication-plugin=mysql_native_password --log-bin=mysql-bin --server-id=1
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$(cat /run/secrets/mysql_root_password)"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MySQL Slave
  mysql-slave:
    image: mysql:8.0
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      placement:
        constraints:
          - node.labels.mysql-slave == true
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
[I          memory: 512M
          cpus: '0.5'
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/mysql_root_password
      MYSQL_DATABASE: wordpress_db
      MYSQL_USER: wordpress_user
      MYSQL_PASSWORD_FILE: /run/secrets/mysql_password
      MYSQL_MASTER_HOST: mysql-master
      MYSQL_REPLICATION_USER: replicator
      MYSQL_REPLICATION_PASSWORD_FILE: /run/secrets/mysql_replication_password
    volumes:
      - mysql_slave_data:/var/lib/mysql
    networks:
      - backend
    secrets:
      - mysql_root_password
      - mysql_password
      - mysql_replication_password
    command: --default-authentication-plugin=mysql_native_password --server-id=2 --read-only=1
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$(cat /run/secrets/mysql_root_password)"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cluster
  redis:
    image: redis:7-alpine
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    volumes:
      - redis_data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Memcached Cluster
  memcached:
    image: memcached:alpine
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    networks:
      - backend
    command: memcached -m 256
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "11211"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    ports:
      - target: 9090
        published: 9090
        protocol: tcp
        mode: ingress
    volumes:
      - prometheus_data:/prometheus
    networks:
      - backend
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:latest
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    ports:
      - target: 3000
        published: 3000
        protocol: tcp
        mode: ingress
    environment:
      GF_SECURITY_ADMIN_PASSWORD_FILE: /run/secrets/grafana_password
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - backend
    secrets:
      - grafana_password

  # Visualizer for Swarm
  visualizer:
    image: dockersamples/visualizer:latest
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    ports:
      - target: 8080
        published: 8084
        protocol: tcp
        mode: ingress
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - backend

volumes:
  wordpress_data:
    driver: local
  wp_content:
    driver: local
  mysql_master_data:
    driver: local
  mysql_slave_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_config:
    driver: local

networks:
  frontend:
    driver: overlay
    attachable: true
  backend:
    driver: overlay
    attachable: true

secrets:
  mysql_root_password:
    external: true
  mysql_password:
    external: true
  mysql_replication_password:
    external: true
  grafana_password:
    external: true

configs:
  nginx_conf:
    external: true
  nginx_wordpress_conf:
    external: true
  prometheus_config:
    external: true
